// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DraftKings.BooksApi.E2E.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create Book")]
    public partial class CreateBookFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CreateBook.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests/Features", "Create Book", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create book positive")]
        [NUnit.Framework.TestCaseAttribute("The Catcher in the Rye", "Rumen", "2/2/1902", "Jerome", "Salinger", "2/2/1902", null)]
        public void CreateBookPositive(string title, string publisher, string releaseDate, string authorFirstName, string authorLastName, string authorDateOfBirth, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Publisher", publisher);
            argumentsOfScenario.Add("ReleaseDate", releaseDate);
            argumentsOfScenario.Add("AuthorFirstName", authorFirstName);
            argumentsOfScenario.Add("AuthorLastName", authorLastName);
            argumentsOfScenario.Add("AuthorDateOfBirth", authorDateOfBirth);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create book positive", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("I register user with username \"rumen\", email \"rument@gmail.com\" and password \"Asd" +
                        "123@@\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.And("I login as \"rument@gmail.com\" with password \"Asd123@@\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DateOfBirth"});
                table1.AddRow(new string[] {
                            string.Format("{0}", authorFirstName),
                            string.Format("{0}", authorLastName),
                            string.Format("{0}", authorDateOfBirth)});
#line 6
 testRunner.When("I create an author", ((string)(null)), table1, "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Publisher",
                            "ReleaseDate"});
                table2.AddRow(new string[] {
                            string.Format("{0}", title),
                            string.Format("{0}", publisher),
                            string.Format("{0}", releaseDate)});
#line 9
 testRunner.And("I create a book", ((string)(null)), table2, "And ");
#line hidden
#line 12
 testRunner.Then("I verify that the book was created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create book negative")]
        [NUnit.Framework.TestCaseAttribute("The Catcher in the Rye", "Rumen", "2/2/1902", "", "Salinger", "2/2/1902", null)]
        [NUnit.Framework.TestCaseAttribute("The Catcher in the Rye", "Rumen", "2/2/1902", "Jerome", "", "2/2/1902", null)]
        [NUnit.Framework.TestCaseAttribute("", "Rumen", "2/2/1902", "", "Salinger", "2/2/1902", null)]
        [NUnit.Framework.TestCaseAttribute("The Catcher in the Rye", "", "2/2/1902", "", "Salinger", "2/2/1902", null)]
        public void CreateBookNegative(string title, string publisher, string releaseDate, string authorFirstName, string authorLastName, string authorDateOfBirth, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Publisher", publisher);
            argumentsOfScenario.Add("ReleaseDate", releaseDate);
            argumentsOfScenario.Add("AuthorFirstName", authorFirstName);
            argumentsOfScenario.Add("AuthorLastName", authorLastName);
            argumentsOfScenario.Add("AuthorDateOfBirth", authorDateOfBirth);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create book negative", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given("I register user with username \"rumen\", email \"rument@gmail.com\" and password \"Asd" +
                        "123@@\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.And("I login as \"rument@gmail.com\" with password \"Asd123@@\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "DateOfBirth"});
                table3.AddRow(new string[] {
                            string.Format("{0}", authorFirstName),
                            string.Format("{0}", authorLastName),
                            string.Format("{0}", authorDateOfBirth)});
#line 21
 testRunner.When("I create an author", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Publisher",
                            "ReleaseDate"});
                table4.AddRow(new string[] {
                            string.Format("{0}", title),
                            string.Format("{0}", publisher),
                            string.Format("{0}", releaseDate)});
#line 24
 testRunner.And("I create a book", ((string)(null)), table4, "And ");
#line hidden
#line 27
 testRunner.Then("I verify that the book was not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
